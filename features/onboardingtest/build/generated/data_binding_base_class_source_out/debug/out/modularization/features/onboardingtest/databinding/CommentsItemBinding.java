// Generated by view binder compiler. Do not edit!
package modularization.features.onboardingtest.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import modularization.features.onboardingtest.R;

public final class CommentsItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView commentsBodyTxt;

  @NonNull
  public final TextView commentsEmailLabelTxt;

  @NonNull
  public final TextView commentsEmailTxt;

  @NonNull
  public final TextView horizontalBodyTxt;

  @NonNull
  public final TextView titleTxt;

  private CommentsItemBinding(@NonNull RelativeLayout rootView, @NonNull TextView commentsBodyTxt,
      @NonNull TextView commentsEmailLabelTxt, @NonNull TextView commentsEmailTxt,
      @NonNull TextView horizontalBodyTxt, @NonNull TextView titleTxt) {
    this.rootView = rootView;
    this.commentsBodyTxt = commentsBodyTxt;
    this.commentsEmailLabelTxt = commentsEmailLabelTxt;
    this.commentsEmailTxt = commentsEmailTxt;
    this.horizontalBodyTxt = horizontalBodyTxt;
    this.titleTxt = titleTxt;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CommentsItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CommentsItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.comments_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CommentsItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.comments_body_txt;
      TextView commentsBodyTxt = rootView.findViewById(id);
      if (commentsBodyTxt == null) {
        break missingId;
      }

      id = R.id.comments_email_label_txt;
      TextView commentsEmailLabelTxt = rootView.findViewById(id);
      if (commentsEmailLabelTxt == null) {
        break missingId;
      }

      id = R.id.comments_email_txt;
      TextView commentsEmailTxt = rootView.findViewById(id);
      if (commentsEmailTxt == null) {
        break missingId;
      }

      id = R.id.horizontal_body_txt;
      TextView horizontalBodyTxt = rootView.findViewById(id);
      if (horizontalBodyTxt == null) {
        break missingId;
      }

      id = R.id.title_txt;
      TextView titleTxt = rootView.findViewById(id);
      if (titleTxt == null) {
        break missingId;
      }

      return new CommentsItemBinding((RelativeLayout) rootView, commentsBodyTxt,
          commentsEmailLabelTxt, commentsEmailTxt, horizontalBodyTxt, titleTxt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
